############################################################################
# ------------------------------------------------------------------------
# Copyright 2020 VMware, Inc.  All rights reserved. VMware Confidential
# ------------------------------------------------------------------------
###

---
layout: "avi"
page_title: "AVI: avi_virtualservice"
sidebar_current: "docs-avi-datasource-virtualservice"
description: |-
  Get information of Avi VirtualService.
---

# avi_virtualservice

This data source is used to to get avi_virtualservice objects.

## Example Usage

```hcl
data "avi_virtualservice" "foo_virtualservice" {
    uuid = "virtualservice-f9cf6b3e-a411-436f-95e2-2982ba2b217b"
    name = "foo"
    cloud_ref = "/api/cloud/?tenant=admin&name=Default-Cloud"
  }
```

## Argument Reference

* `name` - (Optional) Search VirtualService by name.
* `uuid` - (Optional) Search VirtualService by uuid.
* `cloud_ref` - (Optional) Search VirtualService by cloud_ref.
  
## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `active_standby_se_tag` - This configuration only applies if the virtualservice is in legacy active standby ha mode and load distribution among active standby is enabled.
* `allow_invalid_client_cert` - Process request even if invalid client certificate is presented.
* `analytics_policy` - Determines analytics settings for the application.
* `analytics_profile_ref` - Specifies settings related to analytics.
* `apic_contract_graph` - The name of the contract/graph associated with the virtual service.
* `application_profile_ref` - Enable application layer specific features for the virtual service.
* `bulk_sync_kvcache` - (this is a beta feature).
* `client_auth` - Http authentication configuration for protected resources.
* `close_client_conn_on_config_update` - Close client connection on vs config update.
* `cloud_config_cksum` - Checksum of cloud configuration for vs.
* `cloud_ref` - It is a reference to an object of type cloud.
* `cloud_type` - Enum options - cloud_none, cloud_vcenter, cloud_openstack, cloud_aws, cloud_vca, cloud_apic, cloud_mesos, cloud_linuxserver, cloud_docker_ucp, cloud_rancher, cloud_oshift_k8s, cloud_azure, cloud_gcp.
* `connections_rate_limit` - Rate limit the incoming connections to this virtual service.
* `content_rewrite` - Profile used to match and rewrite strings in request and/or response body.
* `created_by` - Creator name.
* `delay_fairness` - Select the algorithm for qos fairness.
* `description` - User defined description for the object.
* `dns_info` - Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record.
* `dns_policies` - Dns policies applied on the dns traffic of the virtual service.
* `east_west_placement` - Force placement on all se's in service group (mesos mode only).
* `enable_autogw` - Response traffic to clients will be sent back to the source mac address of the connection, rather than statically sent to a default gateway.
* `enable_rhi` - Enable route health injection using the bgp config in the vrf context.
* `enable_rhi_snat` - Enable route health injection for source nat'ted floating ip address using the bgp config in the vrf context.
* `enabled` - Enable or disable the virtual service.
* `error_page_profile_ref` - Error page profile to be used for this virtualservice.this profile is used to send the custom error page to the client generated by the proxy.
* `flow_dist` - Criteria for flow distribution among ses.
* `flow_label_type` - Criteria for flow labelling.
* `fqdn` - Dns resolvable, fully qualified domain name of the virtualservice.
* `host_name_xlate` - Translate the host name sent to the servers to this value.
* `http_policies` - Http policies applied on the data traffic of the virtual service.
* `ign_pool_net_reach` - Ignore pool servers network reachability constraints for virtual service placement.
* `l4_policies` - L4 policies applied to the data traffic of the virtual service.
* `labels` - Key value pairs for granular object access control.
* `limit_doser` - Limit potential dos attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while.
* `max_cps_per_client` - Maximum connections per second per client ip.
* `microservice_ref` - Microservice representing the virtual service.
* `min_pools_up` - Minimum number of up pools to mark vs up.
* `name` - Name for the virtual service.
* `network_profile_ref` - Determines network settings such as protocol, tcp or udp, and related options for the protocol.
* `network_security_policy_ref` - Network security policies for the virtual service.
* `nsx_securitygroup` - A list of nsx groups representing the clients which can access the virtual ip of the virtual service.
* `performance_limits` - Optional settings that determine performance limits like max connections or bandwdith etc.
* `pool_group_ref` - The pool group is an object that contains pools.
* `pool_ref` - The pool is an object that contains destination servers and related attributes such as load-balancing and persistence.
* `remove_listening_port_on_vs_down` - Remove listening port if virtualservice is down.
* `requests_rate_limit` - Rate limit the incoming requests to this virtual service.
* `saml_sp_config` - Application-specific saml config.
* `scaleout_ecmp` - Disable re-distribution of flows across service engines for a virtual service.
* `se_group_ref` - The service engine group to use for this virtual service.
* `security_policy_ref` - Security policy applied on the traffic of the virtual service.
* `server_network_profile_ref` - Determines the network settings profile for the server side of tcp proxied connections.
* `service_metadata` - Metadata pertaining to the service provided by this virtual service.
* `service_pool_select` - Select pool based on destination port.
* `services` - List of services defined for this virtual service.
* `sideband_profile` - Sideband configuration to be used for this virtualservice.it can be used for sending traffic to sideband vips for external inspection etc.
* `snat_ip` - Nat'ted floating source ip address(es) for upstream connection to servers.
* `ssl_key_and_certificate_refs` - Select or create one or two certificates, ec and/or rsa, that will be presented to ssl/tls terminated connections.
* `ssl_profile_ref` - Determines the set of ssl versions and ciphers to accept for ssl/tls terminated connections.
* `ssl_profile_selectors` - Select ssl profile based on client ip address match.
* `ssl_sess_cache_avg_size` - Expected number of ssl session cache entries (may be exceeded).
* `sso_policy_ref` - The sso policy attached to the virtualservice.
* `static_dns_records` - List of static dns records applied to this virtual service.
* `tenant_ref` - It is a reference to an object of type tenant.
* `test_se_datastore_level_1_ref` - Used for testing se datastore upgrade 2.0 functionality.
* `topology_policies` - Topology policies applied on the dns traffic of the virtual service based ongslb topology algorithm.
* `traffic_clone_profile_ref` - Server network or list of servers for cloning traffic.
* `traffic_enabled` - Knob to enable the virtual service traffic on its assigned service engines.
* `type` - Specify if this is a normal virtual service, or if it is the parent or child of an sni-enabled virtual hosted virtual service.
* `use_bridge_ip_as_vip` - Use bridge ip as vip on each host in mesos deployments.
* `use_vip_as_snat` - Use the virtual ip as the snat ip for health monitoring and sending traffic to the backend servers instead of the service engine interface ip.
* `uuid` - Uuid of the virtualservice.
* `vh_domain_name` - The exact name requested from the client's sni-enabled tls hello domain name field.
* `vh_parent_vs_uuid` - Specifies the virtual service acting as virtual hosting (sni) parent.
* `vip` - List of virtual service ips.
* `vrf_context_ref` - Virtual routing context that the virtual service is bound to.
* `vs_datascripts` - Datascripts applied on the data traffic of the virtual service.
* `vsvip_cloud_config_cksum` - Checksum of cloud configuration for vsvip.
* `vsvip_ref` - Mostly used during the creation of shared vs, this field refers to entities that can be shared across virtual services.
* `waf_policy_ref` - Waf policy for the virtual service.
* `weight` - The quality of service weight to assign to traffic transmitted from this virtual service.

